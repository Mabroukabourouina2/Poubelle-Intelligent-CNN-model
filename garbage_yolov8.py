# -*- coding: utf-8 -*-
"""Garbage_Yolov8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1alJLNvMNdBkjcZdu0Ib-lRw950jmQN32
"""

# prompt: drive connection

from google.colab import drive
drive.mount('/content/drive')



import pickle
from tensorflow.keras.models import load_model
import argparse

def convert_hdf5_to_pkl(hdf5_path, pkl_path):
    # Load the HDF5 model
    model = load_model(hdf5_path)

    # Extract model architecture as a JSON string
    model_json = model.to_json()

    # Extract model weights
    model_weights = model.get_weights()

    # Create a dictionary to store the architecture and weights
    model_dict = {
        'model_json': model_json,
        'model_weights': model_weights
    }

    # Save the dictionary to a PKL file
    with open(pkl_path, 'wb') as pkl_file:
        pickle.dump(model_dict, pkl_file)

    print(f"Model saved to {pkl_path}")

if __name__ == "__main__":
    # Set up argument parsing
    parser = argparse.ArgumentParser(description='Convert HDF5 model to PKL file')
    parser.add_argument('input', type=str, help='Path to the input HDF5 file')
    parser.add_argument('output', type=str, help='Path to the output PKL file')

    # Parse arguments
    args = parser.parse_args()

    # Convert the HDF5 model to PKL
    convert_hdf5_to_pkl(args.input, args.output)

!pip install ultralytics==8.0.196

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()

# Commented out IPython magic to ensure Python compatibility.
from ultralytics import YOLO

def train_yolov8n_classification_model(model_path, data_path, epochs=30, batch_size=-1, optimizer='SGD', save_period=3, patience=4, imgsz=224, verbose=True):
    """
    Train a YOLOv8n classification model.

    Args:
        model_path (str): Path to the pretrained YOLOv8n classification model.
        data_path (str): Path to the training data.
        epochs (int): Number of training epochs (default: 40).
        batch_size (int): Batch size for training (default: -1, which means auto).
        optimizer (str): Optimizer for training (default: 'SGD').
        save_period (int): Save the model every save_period epochs (default: 10).
    """
#     %cd "/content/drive/MyDrive/garbage/garbage_data_split"
    model = YOLO(model_path)  # load a pretrained YOLOv8n classification model
    model.train(data=data_path, epochs=epochs, batch=batch_size, optimizer=optimizer, save_period=save_period)  # train the model

# Example usage:
pretrained_model_path = 'yolov8n-cls.pt'
training_data_path = '/content/drive/MyDrive/garbage/garbage_data_split'

train_yolov8n_classification_model(pretrained_model_path, training_data_path)

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/garbage/garbage_data_split"

!yolo detect val model=/content/drive/MyDrive/garbage/garbage_data_split/runs/classify/train/weights/best.pt data=/content/drive/MyDrive/garbage/garbage_data_split

!yolo detect val model=/content/drive/MyDrive/garbage/garbage_data_split/runs/classify/train/weights/best.pt data=/content/drive/MyDrive/garbage/garbage_data_split

# Load a pretrained YOLOv8n model
model = YOLO("/content/drive/MyDrive/garbage/garbage_data_split/runs/classify/train/weights/best.pt")

# Define path to the image file
source = "/content/drive/MyDrive/garbage/cropped_resized_BT/glass3.jpeg"

# Run inference on the source
results = model(source)  # list of Results objects

# Load a pretrained YOLOv8n model
model = YOLO("/content/drive/MyDrive/garbage/garbage_data_split/runs/classify/train/weights/best.pt")

# Define path to the image file
source = "/content/drive/MyDrive/garbage/Big_Truth/plastic4.jpeg"

# Run inference on the source
results = model(source)  # list of Results objects

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/garbage/garbage_data_split"

!yolo task=classify mode=predict model=/content/drive/MyDrive/garbage/garbage_data_split/runs/classify/train/weights/best.pt source=/content/drive/MyDrive/garbage/Big_Truth save=true

import glob
from IPython.display import Image, display
for image_path in glob.glob('/content/drive/MyDrive/garbage/garbage_data_split/runs/classify/predict/*[jpeg,jpg]'):
  display(Image(filename=image_path, height=250))
  print("\n")

!pip install cap_from_youtube

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/garbage/garbage_data_split"

from ultralytics import YOLO

from ultralytics import YOLO
import cv2
from cap_from_youtube import cap_from_youtube
# Load the YOLOv8 model
model= YOLO("/content/drive/MyDrive/garbage/garbage_data_split/runs/classify/train/weights/garbageYolov8.pt")


# Define source as YouTube video URL
source = "https://youtu.be/LR9FtWVjk2c"

# Run inference on the source
results = model(source, stream=True)  # generator of Results objects

from ultralytics import YOLO

model= YOLO(r"/content/drive/MyDrive/garbage/garbage_data_split/runs/classify/train/weights/garbageYolov8.pt")
# Define path to video file
source ="/content/drive/MyDrive/garbage/Big_Truth/test.mp4"

# Run inference on the source
results = model(source, stream=True)  # generator of Results objects

